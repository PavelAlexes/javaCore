package Multi.Volatile;
import java.util.Scanner;
public class Volatile {
    public static void main(String[] args) {

        Test test = new Test();
        test.start();

        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();

        test.stopRun();


    }
}

/*
Volatile позволяет хранить переменную в общей памяти, а не в отдельном кэше, что исключает ошибки при работе с переменной.
    Volatile — ключевое слово в Java, которое гарантирует, что значение переменной будет считываться непосредственно из основной
памяти, а не из кэша каждого отдельного потока. Это означает, что любые изменения, внесённые в переменную, будут немедленно видны всем другим потокам.
    Некоторые ситуации, в которых используют volatile: два или более потока хотят получить доступ к определённым инструкциям;
значение обновляется одним потоком и просматривается другими;
нужно управлять флагами, индикаторами состояния и другими переменными.
    Volatile можно применять к переменным любого вида, включая примитивные типы и ссылки на объекты. Однако для сложных структур
данных или изменяемых объектов этот модификатор не подходит, так как не гарантирует безопасность потоков для операций, которые
изменяют их внутреннее состояние.
    Важно использовать volatile разумно: чрезмерное применение может привести к проблемам с производительностью, так как требует
частого чтения и записи в основную память. Кроме того, volatile не следует использовать вместо правильной синхронизации.
Пример использования: даже если два потока попытаются увеличить счётчик одновременно, они будут видеть актуальное значение
переменной, так как оно будет считываться прямо из основной памяти.
*/